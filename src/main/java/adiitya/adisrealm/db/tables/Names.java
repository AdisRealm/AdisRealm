/*
 * This file is generated by jOOQ.
 */
package adiitya.adisrealm.db.tables;


import adiitya.adisrealm.db.DefaultSchema;
import adiitya.adisrealm.db.tables.records.NamesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Names extends TableImpl<NamesRecord> {

    private static final long serialVersionUID = 667224321;

    /**
     * The reference instance of <code>names</code>
     */
    public static final Names NAMES = new Names();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NamesRecord> getRecordType() {
        return NamesRecord.class;
    }

    /**
     * The column <code>names.uuid</code>.
     */
    public final TableField<NamesRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>names.element</code>.
     */
    public final TableField<NamesRecord, String> ELEMENT = createField("element", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>names.value</code>.
     */
    public final TableField<NamesRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>names.name</code>.
     */
    public final TableField<NamesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * Create a <code>names</code> table reference
     */
    public Names() {
        this(DSL.name("names"), null);
    }

    /**
     * Create an aliased <code>names</code> table reference
     */
    public Names(String alias) {
        this(DSL.name(alias), NAMES);
    }

    /**
     * Create an aliased <code>names</code> table reference
     */
    public Names(Name alias) {
        this(alias, NAMES);
    }

    private Names(Name alias, Table<NamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Names(Name alias, Table<NamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Names(Table<O> child, ForeignKey<O, NamesRecord> key) {
        super(child, key, NAMES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Names as(String alias) {
        return new Names(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Names as(Name alias) {
        return new Names(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Names rename(String name) {
        return new Names(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Names rename(Name name) {
        return new Names(name, null);
    }
}
