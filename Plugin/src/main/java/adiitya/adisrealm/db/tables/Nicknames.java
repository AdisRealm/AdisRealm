/*
 * This file is generated by jOOQ.
 */
package adiitya.adisrealm.db.tables;


import adiitya.adisrealm.db.Gs10044;
import adiitya.adisrealm.db.tables.records.NicknamesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nicknames extends TableImpl<NicknamesRecord> {

    private static final long serialVersionUID = 1597089663;

    /**
     * The reference instance of <code>gs10044.nicknames</code>
     */
    public static final Nicknames NICKNAMES = new Nicknames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NicknamesRecord> getRecordType() {
        return NicknamesRecord.class;
    }

    /**
     * The column <code>gs10044.nicknames.uuid</code>.
     */
    public final TableField<NicknamesRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>gs10044.nicknames.nickname</code>.
     */
    public final TableField<NicknamesRecord, String> NICKNAME = createField("nickname", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>gs10044.nicknames</code> table reference
     */
    public Nicknames() {
        this(DSL.name("nicknames"), null);
    }

    /**
     * Create an aliased <code>gs10044.nicknames</code> table reference
     */
    public Nicknames(String alias) {
        this(DSL.name(alias), NICKNAMES);
    }

    /**
     * Create an aliased <code>gs10044.nicknames</code> table reference
     */
    public Nicknames(Name alias) {
        this(alias, NICKNAMES);
    }

    private Nicknames(Name alias, Table<NicknamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nicknames(Name alias, Table<NicknamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Nicknames(Table<O> child, ForeignKey<O, NicknamesRecord> key) {
        super(child, key, NICKNAMES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gs10044.GS10044;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nicknames as(String alias) {
        return new Nicknames(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nicknames as(Name alias) {
        return new Nicknames(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nicknames rename(String name) {
        return new Nicknames(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nicknames rename(Name name) {
        return new Nicknames(name, null);
    }
}
